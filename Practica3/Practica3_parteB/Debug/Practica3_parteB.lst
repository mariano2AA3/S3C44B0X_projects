
Practica3_parteB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec0  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000004  0c100ec0  0c100ec0  00008ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000050  0c100ec4  0c100ec4  00008ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000011  0c100f14  0c100f14  00008f14  2**2
                  ALLOC
  4 .debug_abbrev 0000052e  00000000  00000000  00008f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000907  00000000  00000000  00009442  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005cc  00000000  00000000  00009d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 00020ccd  00000000  00000000  0000a315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000370  00000000  00000000  0002afe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000229  00000000  00000000  0002b352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000100  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002aa  00000000  00000000  0002b680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0002b92a  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000030  00000000  00000000  0002b954  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000300  00000000  00000000  0002b984  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubtypes 000000e9  00000000  00000000  0002bc84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <D8Led_init>:
/*--- declaracion de funciones ---*/
void D8Led_init(void);
void D8Led_symbol(int value);
/*--- codigo de las funciones ---*/
void D8Led_init(void)
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
/* Estado inicial del display con todos los segmentos iluminados
(buscar en los ficheros de cabecera la direccion implicada--->44blib.h) */ 
	LED8ADDR = 0; 
 c10000c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100010:	e3a02000 	mov	r2, #0
 c100014:	e5c32000 	strb	r2, [r3]
}
 c100018:	e24bd00c 	sub	sp, fp, #12
 c10001c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100020:	e12fff1e 	bx	lr

0c100024 <D8Led_symbol>:
void D8Led_symbol(int value)
{
 c100024:	e1a0c00d 	mov	ip, sp
 c100028:	e92dd800 	push	{fp, ip, lr, pc}
 c10002c:	e24cb004 	sub	fp, ip, #4
 c100030:	e24dd008 	sub	sp, sp, #8
 c100034:	e50b0010 	str	r0, [fp, #-16]
// muestra Symbol[value] en el display
	LED8ADDR=Symbol[value];
 c100038:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10003c:	e59f2018 	ldr	r2, [pc, #24]	; c10005c <D8Led_symbol+0x38>
 c100040:	e51b1010 	ldr	r1, [fp, #-16]
 c100044:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c100048:	e20220ff 	and	r2, r2, #255	; 0xff
 c10004c:	e5c32000 	strb	r2, [r3]
}
 c100050:	e24bd00c 	sub	sp, fp, #12
 c100054:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100058:	e12fff1e 	bx	lr
 c10005c:	0c100ec4 	.word	0x0c100ec4

0c100060 <at24c04_bytewrite>:
#include "at24c04.h"
#include "iic.h"


void at24c04_bytewrite( uint16 addr, uint8 data )
{
 c100060:	e1a0c00d 	mov	ip, sp
 c100064:	e92dd800 	push	{fp, ip, lr, pc}
 c100068:	e24cb004 	sub	fp, ip, #4
 c10006c:	e24dd010 	sub	sp, sp, #16
 c100070:	e1a02000 	mov	r2, r0
 c100074:	e1a03001 	mov	r3, r1
 c100078:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c10007c:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint8 page;
	
	page = (addr & 0x100) >> 8;	// Extrae el número de página 
 c100080:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100084:	e2033c01 	and	r3, r3, #256	; 0x100
 c100088:	e1a03443 	asr	r3, r3, #8
 c10008c:	e54b300d 	strb	r3, [fp, #-13]

	/*Añadir el prefijo golden_ para usar la versión de test. Ej. golden_iic_putByte_start*/
	iic_putByte_start( (AT24C04_ADDRESS << 2) | (page << 1) | AT24C04_WRITE );
 c100090:	e55b300d 	ldrb	r3, [fp, #-13]
 c100094:	e1a03083 	lsl	r3, r3, #1
 c100098:	e20330ff 	and	r3, r3, #255	; 0xff
 c10009c:	e1e03003 	mvn	r3, r3
 c1000a0:	e203305f 	and	r3, r3, #95	; 0x5f
 c1000a4:	e1e03003 	mvn	r3, r3
 c1000a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000b0:	e1a00003 	mov	r0, r3
 c1000b4:	eb0000fb 	bl	c1004a8 <iic_putByte_start>
	iic_putByte( addr & 0xFF );
 c1000b8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1000bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000c0:	e1a00003 	mov	r0, r3
 c1000c4:	eb000114 	bl	c10051c <iic_putByte>
	iic_putByte_stop( data );
 c1000c8:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c1000cc:	e1a00003 	mov	r0, r3
 c1000d0:	eb00012a 	bl	c100580 <iic_putByte_stop>
}
 c1000d4:	e24bd00c 	sub	sp, fp, #12
 c1000d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1000dc:	e12fff1e 	bx	lr

0c1000e0 <at24c04_byteread>:
	
void at24c04_byteread( uint16 addr, uint8 *data )
{
 c1000e0:	e1a0c00d 	mov	ip, sp
 c1000e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1000e8:	e24cb004 	sub	fp, ip, #4
 c1000ec:	e24dd010 	sub	sp, sp, #16
 c1000f0:	e1a03000 	mov	r3, r0
 c1000f4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1000f8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 page;
	
	page = (addr & 0x100) >> 8;	// Extrae el número de página 
 c1000fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100100:	e2033c01 	and	r3, r3, #256	; 0x100
 c100104:	e1a03443 	asr	r3, r3, #8
 c100108:	e54b300d 	strb	r3, [fp, #-13]
	
	iic_putByte_start( (AT24C04_ADDRESS << 2) | (page << 1) | AT24C04_WRITE );  // Lleva el contador de dirección de la EEPROM a la dirección indicada
 c10010c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100110:	e1a03083 	lsl	r3, r3, #1
 c100114:	e20330ff 	and	r3, r3, #255	; 0xff
 c100118:	e1e03003 	mvn	r3, r3
 c10011c:	e203305f 	and	r3, r3, #95	; 0x5f
 c100120:	e1e03003 	mvn	r3, r3
 c100124:	e20330ff 	and	r3, r3, #255	; 0xff
 c100128:	e20330ff 	and	r3, r3, #255	; 0xff
 c10012c:	e1a00003 	mov	r0, r3
 c100130:	eb0000dc 	bl	c1004a8 <iic_putByte_start>
	iic_putByte( addr & 0xFF );
 c100134:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100138:	e20330ff 	and	r3, r3, #255	; 0xff
 c10013c:	e1a00003 	mov	r0, r3
 c100140:	eb0000f5 	bl	c10051c <iic_putByte>
	iic_getByte_start( (AT24C04_ADDRESS << 2) | (page << 1) | AT24C04_READ );
 c100144:	e55b300d 	ldrb	r3, [fp, #-13]
 c100148:	e1a03083 	lsl	r3, r3, #1
 c10014c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100150:	e1e03003 	mvn	r3, r3
 c100154:	e203305e 	and	r3, r3, #94	; 0x5e
 c100158:	e1e03003 	mvn	r3, r3
 c10015c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100160:	e20330ff 	and	r3, r3, #255	; 0xff
 c100164:	e1a00003 	mov	r0, r3
 c100168:	eb000128 	bl	c100610 <iic_getByte_start>
	*data = iic_getByte_stop( NO_RxACK ); 								// En una EEPROM, no debe generarse ACK tras el último dato recibido
 c10016c:	e3a00000 	mov	r0, #0
 c100170:	eb00015a 	bl	c1006e0 <iic_getByte_stop>
 c100174:	e1a03000 	mov	r3, r0
 c100178:	e1a02003 	mov	r2, r3
 c10017c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100180:	e5c32000 	strb	r2, [r3]
}
 c100184:	e24bd00c 	sub	sp, fp, #12
 c100188:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10018c:	e12fff1e 	bx	lr

0c100190 <Eint4567_init>:
extern int estado;
extern uint16 direccion;
extern uint8 dato;

/*--- codigo de funciones ---*/
void Eint4567_init(void) {
 c100190:	e1a0c00d 	mov	ip, sp
 c100194:	e92dd800 	push	{fp, ip, lr, pc}
 c100198:	e24cb004 	sub	fp, ip, #4


/* Configuracion del controlador de interrupciones */

	// Borra EXTINTPND escribiendo 1s en el propio registro
	rEXTINTPND = 0xf;
 c10019c:	e59f3088 	ldr	r3, [pc, #136]	; c10022c <Eint4567_init+0x9c>
 c1001a0:	e3a0200f 	mov	r2, #15
 c1001a4:	e5832000 	str	r2, [r3]

	// Borra INTPND escribiendo 1s en I_ISPC
	rI_ISPC = 0xfffffff;
 c1001a8:	e59f3080 	ldr	r3, [pc, #128]	; c100230 <Eint4567_init+0xa0>
 c1001ac:	e3e0220f 	mvn	r2, #-268435456	; 0xf0000000
 c1001b0:	e5832000 	str	r2, [r3]

	// Configura las lineas como de tipo IRQ mediante INTMOD
	rINTMOD = 0x0000000;
 c1001b4:	e59f3078 	ldr	r3, [pc, #120]	; c100234 <Eint4567_init+0xa4>
 c1001b8:	e3a02000 	mov	r2, #0
 c1001bc:	e5832000 	str	r2, [r3]

	// Habilita int. vectorizadas y la linea IRQ (FIQ no) mediante INTCON
	rINTCON = 0x1;
 c1001c0:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c1001c4:	e3a02001 	mov	r2, #1
 c1001c8:	e5832000 	str	r2, [r3]

	// Enmascara todas las lineas excepto Eint4567 y el bit global (INTMSK)
	rINTMSK = 0xffffffff & ~BIT_GLOBAL & ~BIT_EINT4567;
 c1001cc:	e59f3064 	ldr	r3, [pc, #100]	; c100238 <Eint4567_init+0xa8>
 c1001d0:	e3e02642 	mvn	r2, #69206016	; 0x4200000
 c1001d4:	e5832000 	str	r2, [r3]

	// Establecer la rutina de servicio para Eint4567
	pISR_EINT4567 = (unsigned) Eint4567_ISR;
 c1001d8:	e59f305c 	ldr	r3, [pc, #92]	; c10023c <Eint4567_init+0xac>
 c1001dc:	e59f205c 	ldr	r2, [pc, #92]	; c100240 <Eint4567_init+0xb0>
 c1001e0:	e5832000 	str	r2, [r3]

/* Configuracion del puerto G */
	// Establece la funcion de los pines (EINT7-EINT0)
	// Bits 6 y 7 a 0, resto a 1´s
	rPCONG = 0xff3f;
 c1001e4:	e59f3058 	ldr	r3, [pc, #88]	; c100244 <Eint4567_init+0xb4>
 c1001e8:	e59f2058 	ldr	r2, [pc, #88]	; c100248 <Eint4567_init+0xb8>
 c1001ec:	e5832000 	str	r2, [r3]

	//Habilita las resistencias de pull-up
	rPUPG = 0;
 c1001f0:	e59f3054 	ldr	r3, [pc, #84]	; c10024c <Eint4567_init+0xbc>
 c1001f4:	e3a02000 	mov	r2, #0
 c1001f8:	e5832000 	str	r2, [r3]

	// Configura las lineas de int. como de flanco de bajada mediante EXTINT
	// _01x_01x_01x_01x_01x_01x_01x_01x ; x,_ = doesnt care
	rEXTINT = 0x33333333;
 c1001fc:	e59f304c 	ldr	r3, [pc, #76]	; c100250 <Eint4567_init+0xc0>
 c100200:	e59f204c 	ldr	r2, [pc, #76]	; c100254 <Eint4567_init+0xc4>
 c100204:	e5832000 	str	r2, [r3]

/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
	rEXTINTPND = 0xf;
 c100208:	e59f301c 	ldr	r3, [pc, #28]	; c10022c <Eint4567_init+0x9c>
 c10020c:	e3a0200f 	mov	r2, #15
 c100210:	e5832000 	str	r2, [r3]
	rI_ISPC = 0xfffffff;
 c100214:	e59f3014 	ldr	r3, [pc, #20]	; c100230 <Eint4567_init+0xa0>
 c100218:	e3e0220f 	mvn	r2, #-268435456	; 0xf0000000
 c10021c:	e5832000 	str	r2, [r3]
}
 c100220:	e24bd00c 	sub	sp, fp, #12
 c100224:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100228:	e12fff1e 	bx	lr
 c10022c:	01d20054 	.word	0x01d20054
 c100230:	01e00024 	.word	0x01e00024
 c100234:	01e00008 	.word	0x01e00008
 c100238:	01e0000c 	.word	0x01e0000c
 c10023c:	0c7fff74 	.word	0x0c7fff74
 c100240:	0c100258 	.word	0x0c100258
 c100244:	01d20040 	.word	0x01d20040
 c100248:	0000ff3f 	.word	0x0000ff3f
 c10024c:	01d20048 	.word	0x01d20048
 c100250:	01d20050 	.word	0x01d20050
 c100254:	33333333 	.word	0x33333333

0c100258 <Eint4567_ISR>:


void Eint4567_ISR(void) {
 c100258:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10025c:	e1a0c00d 	mov	ip, sp
 c100260:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100264:	e24cb004 	sub	fp, ip, #4
 c100268:	e24dd008 	sub	sp, sp, #8

	//while ( (rPDATG & 0x00000040) == 0 || (rPDATG & 0x00000080) == 0) {}


	//Delay para eliminar rebotes
	DelayMs(100);
 c10026c:	e3a00064 	mov	r0, #100	; 0x64
 c100270:	eb00024b 	bl	c100ba4 <DelayMs>

	// IZQ
	if ( (rPDATG & 0x00000040) == 0 ) {
 c100274:	e59f3148 	ldr	r3, [pc, #328]	; c1003c4 <Eint4567_ISR+0x16c>
 c100278:	e5933000 	ldr	r3, [r3]
 c10027c:	e2033040 	and	r3, r3, #64	; 0x40
 c100280:	e3530000 	cmp	r3, #0
 c100284:	1a00001d 	bne	c100300 <Eint4567_ISR+0xa8>
		estado = (estado + 1) % 6;
 c100288:	e59f3138 	ldr	r3, [pc, #312]	; c1003c8 <Eint4567_ISR+0x170>
 c10028c:	e5933000 	ldr	r3, [r3]
 c100290:	e2831001 	add	r1, r3, #1
 c100294:	e59f3130 	ldr	r3, [pc, #304]	; c1003cc <Eint4567_ISR+0x174>
 c100298:	e0c20193 	smull	r0, r2, r3, r1
 c10029c:	e1a03fc1 	asr	r3, r1, #31
 c1002a0:	e0632002 	rsb	r2, r3, r2
 c1002a4:	e1a03002 	mov	r3, r2
 c1002a8:	e1a03083 	lsl	r3, r3, #1
 c1002ac:	e0833002 	add	r3, r3, r2
 c1002b0:	e1a03083 	lsl	r3, r3, #1
 c1002b4:	e0632001 	rsb	r2, r3, r1
 c1002b8:	e59f3108 	ldr	r3, [pc, #264]	; c1003c8 <Eint4567_ISR+0x170>
 c1002bc:	e5832000 	str	r2, [r3]
		D8Led_symbol(estado);
 c1002c0:	e59f3100 	ldr	r3, [pc, #256]	; c1003c8 <Eint4567_ISR+0x170>
 c1002c4:	e5933000 	ldr	r3, [r3]
 c1002c8:	e1a00003 	mov	r0, r3
 c1002cc:	ebffff54 	bl	c100024 <D8Led_symbol>
		if(estado == 5){
 c1002d0:	e59f30f0 	ldr	r3, [pc, #240]	; c1003c8 <Eint4567_ISR+0x170>
 c1002d4:	e5933000 	ldr	r3, [r3]
 c1002d8:	e3530005 	cmp	r3, #5
 c1002dc:	1a000021 	bne	c100368 <Eint4567_ISR+0x110>
			at24c04_bytewrite( direccion, dato );
 c1002e0:	e59f30e8 	ldr	r3, [pc, #232]	; c1003d0 <Eint4567_ISR+0x178>
 c1002e4:	e1d320b0 	ldrh	r2, [r3]
 c1002e8:	e59f30e4 	ldr	r3, [pc, #228]	; c1003d4 <Eint4567_ISR+0x17c>
 c1002ec:	e5d33000 	ldrb	r3, [r3]
 c1002f0:	e1a00002 	mov	r0, r2
 c1002f4:	e1a01003 	mov	r1, r3
 c1002f8:	ebffff58 	bl	c100060 <at24c04_bytewrite>
		D8Led_symbol(parte1);
		DelayMs(1000);
		D8Led_symbol(parte2);
	}

	while ( (rPDATG & 0x00000040) == 0 || (rPDATG & 0x00000080) == 0) {}
 c1002fc:	ea00001c 	b	c100374 <Eint4567_ISR+0x11c>
		if(estado == 5){
			at24c04_bytewrite( direccion, dato );
		}
	}
	// DR
	else if ( (rPDATG & 0x00000080) == 0 ) {
 c100300:	e59f30bc 	ldr	r3, [pc, #188]	; c1003c4 <Eint4567_ISR+0x16c>
 c100304:	e5933000 	ldr	r3, [r3]
 c100308:	e2033080 	and	r3, r3, #128	; 0x80
 c10030c:	e3530000 	cmp	r3, #0
 c100310:	1a000016 	bne	c100370 <Eint4567_ISR+0x118>
		at24c04_byteread( direccion, &dato );
 c100314:	e59f30b4 	ldr	r3, [pc, #180]	; c1003d0 <Eint4567_ISR+0x178>
 c100318:	e1d330b0 	ldrh	r3, [r3]
 c10031c:	e1a00003 	mov	r0, r3
 c100320:	e59f10ac 	ldr	r1, [pc, #172]	; c1003d4 <Eint4567_ISR+0x17c>
 c100324:	ebffff6d 	bl	c1000e0 <at24c04_byteread>
		int parte2 = dato & 0xf;
 c100328:	e59f30a4 	ldr	r3, [pc, #164]	; c1003d4 <Eint4567_ISR+0x17c>
 c10032c:	e5d33000 	ldrb	r3, [r3]
 c100330:	e203300f 	and	r3, r3, #15
 c100334:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		//int parte1 = dato >> 4;
		int parte1 = (dato & 0xf0)>>4;
 c100338:	e59f3094 	ldr	r3, [pc, #148]	; c1003d4 <Eint4567_ISR+0x17c>
 c10033c:	e5d33000 	ldrb	r3, [r3]
 c100340:	e1a03223 	lsr	r3, r3, #4
 c100344:	e20330ff 	and	r3, r3, #255	; 0xff
 c100348:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		D8Led_symbol(parte1);
 c10034c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
 c100350:	ebffff33 	bl	c100024 <D8Led_symbol>
		DelayMs(1000);
 c100354:	e3a00ffa 	mov	r0, #1000	; 0x3e8
 c100358:	eb000211 	bl	c100ba4 <DelayMs>
		D8Led_symbol(parte2);
 c10035c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c100360:	ebffff2f 	bl	c100024 <D8Led_symbol>
	}

	while ( (rPDATG & 0x00000040) == 0 || (rPDATG & 0x00000080) == 0) {}
 c100364:	ea000002 	b	c100374 <Eint4567_ISR+0x11c>
 c100368:	e1a00000 	nop			; (mov r0, r0)
 c10036c:	ea000000 	b	c100374 <Eint4567_ISR+0x11c>
 c100370:	e1a00000 	nop			; (mov r0, r0)
 c100374:	e59f3048 	ldr	r3, [pc, #72]	; c1003c4 <Eint4567_ISR+0x16c>
 c100378:	e5933000 	ldr	r3, [r3]
 c10037c:	e2033040 	and	r3, r3, #64	; 0x40
 c100380:	e3530000 	cmp	r3, #0
 c100384:	0afffffa 	beq	c100374 <Eint4567_ISR+0x11c>
 c100388:	e59f3034 	ldr	r3, [pc, #52]	; c1003c4 <Eint4567_ISR+0x16c>
 c10038c:	e5933000 	ldr	r3, [r3]
 c100390:	e2033080 	and	r3, r3, #128	; 0x80
 c100394:	e3530000 	cmp	r3, #0
 c100398:	0afffff5 	beq	c100374 <Eint4567_ISR+0x11c>

	//Borramos EXTINTPND ambas líneas EINT7 y EINT6
	// Ponemos a 1´s los bits de EXTINTPND3(EINT7) y EXTINTPND2(EINT6)
	rEXTINTPND = 0xC;
 c10039c:	e59f3034 	ldr	r3, [pc, #52]	; c1003d8 <Eint4567_ISR+0x180>
 c1003a0:	e3a0200c 	mov	r2, #12
 c1003a4:	e5832000 	str	r2, [r3]

	//Borramos INTPND usando ISPC
	rI_ISPC = BIT_EINT4567;
 c1003a8:	e59f302c 	ldr	r3, [pc, #44]	; c1003dc <Eint4567_ISR+0x184>
 c1003ac:	e3a02602 	mov	r2, #2097152	; 0x200000
 c1003b0:	e5832000 	str	r2, [r3]

}
 c1003b4:	e24bd01c 	sub	sp, fp, #28
 c1003b8:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1003bc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1003c0:	e25ef004 	subs	pc, lr, #4
 c1003c4:	01d20044 	.word	0x01d20044
 c1003c8:	0c100f20 	.word	0x0c100f20
 c1003cc:	2aaaaaab 	.word	0x2aaaaaab
 c1003d0:	0c100f1c 	.word	0x0c100f1c
 c1003d4:	0c100f24 	.word	0x0c100f24
 c1003d8:	01d20054 	.word	0x01d20054
 c1003dc:	01e00024 	.word	0x01e00024

0c1003e0 <iic_init>:

extern uint32 mclk;			   // Frecuencia actual del reloj (Hz)

extern void DelayMs(int ms_time);

void iic_init( void ) {
 c1003e0:	e1a0c00d 	mov	ip, sp
 c1003e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1003e8:	e24cb004 	sub	fp, ip, #4
	// Enable IIC & GPIO & BDMA blocks (si no se activa BDMA, el controlador IIC no es accesible)
	rCLKCON |= (1<<13) | (1<<10) | (1<<7);
 c1003ec:	e59f3094 	ldr	r3, [pc, #148]	; c100488 <iic_init+0xa8>
 c1003f0:	e59f2090 	ldr	r2, [pc, #144]	; c100488 <iic_init+0xa8>
 c1003f4:	e5922000 	ldr	r2, [r2]
 c1003f8:	e3822d92 	orr	r2, r2, #9344	; 0x2480
 c1003fc:	e5832000 	str	r2, [r3]
	
	// PF[1] = IICSDA, PF[0] = IICSCL
	rPCONF = 0xA; // 1010 --> últimos 4 bits del registro.
 c100400:	e59f3084 	ldr	r3, [pc, #132]	; c10048c <iic_init+0xac>
 c100404:	e3a0200a 	mov	r2, #10
 c100408:	e5832000 	str	r2, [r3]
	
	// Pull-up enable
	rPUPF &= ~(1<<1) & ~(1<<0);
 c10040c:	e59f307c 	ldr	r3, [pc, #124]	; c100490 <iic_init+0xb0>
 c100410:	e59f2078 	ldr	r2, [pc, #120]	; c100490 <iic_init+0xb0>
 c100414:	e5922000 	ldr	r2, [r2]
 c100418:	e3c22003 	bic	r2, r2, #3
 c10041c:	e5832000 	str	r2, [r3]
	
    //Configurar la dirección del slave
	// IICADD [7:0] -> slave address = [7-1], Not Mapped = [0]
	rIICADD = S3C44B0X_SLAVE_ADDRESS<<1;
 c100420:	e59f306c 	ldr	r3, [pc, #108]	; c100494 <iic_init+0xb4>
 c100424:	e3a02010 	mov	r2, #16
 c100428:	e5832000 	str	r2, [r3]

    //Generación ACK habilitada, interrupciones habilitadas
    rIICCON = rIICCON | ((mclk / 4000000 - 1) & 0xf); 	//Valor de preescalado, PREESCALER = mclk/16/250000 -1
 c10042c:	e59f3064 	ldr	r3, [pc, #100]	; c100498 <iic_init+0xb8>
 c100430:	e59f2060 	ldr	r2, [pc, #96]	; c100498 <iic_init+0xb8>
 c100434:	e5921000 	ldr	r1, [r2]
 c100438:	e59f205c 	ldr	r2, [pc, #92]	; c10049c <iic_init+0xbc>
 c10043c:	e5920000 	ldr	r0, [r2]
 c100440:	e59f2058 	ldr	r2, [pc, #88]	; c1004a0 <iic_init+0xc0>
 c100444:	e082c290 	umull	ip, r2, r0, r2
 c100448:	e1a02a22 	lsr	r2, r2, #20
 c10044c:	e2422001 	sub	r2, r2, #1
 c100450:	e202200f 	and	r2, r2, #15
 c100454:	e1812002 	orr	r2, r1, r2
 c100458:	e5832000 	str	r2, [r3]
    rIICCON = rIICCON | (1<<7) | (1<<5); //Habilitado ACK e interrupciones
 c10045c:	e59f3034 	ldr	r3, [pc, #52]	; c100498 <iic_init+0xb8>
 c100460:	e59f2030 	ldr	r2, [pc, #48]	; c100498 <iic_init+0xb8>
 c100464:	e5922000 	ldr	r2, [r2]
 c100468:	e38220a0 	orr	r2, r2, #160	; 0xa0
 c10046c:	e5832000 	str	r2, [r3]

    // Activa Tx/Rx
    rIICSTAT = (1<<4); // (Se recomienda NO realizar operaciones lógica sobre este registro)
 c100470:	e59f302c 	ldr	r3, [pc, #44]	; c1004a4 <iic_init+0xc4>
 c100474:	e3a02010 	mov	r2, #16
 c100478:	e5832000 	str	r2, [r3]
}
 c10047c:	e24bd00c 	sub	sp, fp, #12
 c100480:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100484:	e12fff1e 	bx	lr
 c100488:	01d80004 	.word	0x01d80004
 c10048c:	01d20034 	.word	0x01d20034
 c100490:	01d2003c 	.word	0x01d2003c
 c100494:	01d60008 	.word	0x01d60008
 c100498:	01d60000 	.word	0x01d60000
 c10049c:	0c100f10 	.word	0x0c100f10
 c1004a0:	431bde83 	.word	0x431bde83
 c1004a4:	01d60004 	.word	0x01d60004

0c1004a8 <iic_putByte_start>:

void iic_putByte_start( uint8 byte ) { // OK
 c1004a8:	e1a0c00d 	mov	ip, sp
 c1004ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1004b0:	e24cb004 	sub	fp, ip, #4
 c1004b4:	e24dd008 	sub	sp, sp, #8
 c1004b8:	e1a03000 	mov	r3, r0
 c1004bc:	e54b300d 	strb	r3, [fp, #-13]
	// Escribe el dato
	rIICDS = byte;
 c1004c0:	e59f3048 	ldr	r3, [pc, #72]	; c100510 <iic_putByte_start+0x68>
 c1004c4:	e55b200d 	ldrb	r2, [fp, #-13]
 c1004c8:	e5832000 	str	r2, [r3]

	// Máster Tx, start condition, Tx/Rx habilitada
	rIICSTAT = 0xF0;
 c1004cc:	e59f3040 	ldr	r3, [pc, #64]	; c100514 <iic_putByte_start+0x6c>
 c1004d0:	e3a020f0 	mov	r2, #240	; 0xf0
 c1004d4:	e5832000 	str	r2, [r3]

	// Comienza la transmisión (borrando pending bit del IICCON)
	rIICCON &= ~(1<<4);
 c1004d8:	e59f3038 	ldr	r3, [pc, #56]	; c100518 <iic_putByte_start+0x70>
 c1004dc:	e59f2034 	ldr	r2, [pc, #52]	; c100518 <iic_putByte_start+0x70>
 c1004e0:	e5922000 	ldr	r2, [r2]
 c1004e4:	e3c22010 	bic	r2, r2, #16
 c1004e8:	e5832000 	str	r2, [r3]

    // Espera la recepción de ACK
	while((rIICCON & (1<<4)) == 0x0){}
 c1004ec:	e1a00000 	nop			; (mov r0, r0)
 c1004f0:	e59f3020 	ldr	r3, [pc, #32]	; c100518 <iic_putByte_start+0x70>
 c1004f4:	e5933000 	ldr	r3, [r3]
 c1004f8:	e2033010 	and	r3, r3, #16
 c1004fc:	e3530000 	cmp	r3, #0
 c100500:	0afffffa 	beq	c1004f0 <iic_putByte_start+0x48>
}
 c100504:	e24bd00c 	sub	sp, fp, #12
 c100508:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10050c:	e12fff1e 	bx	lr
 c100510:	01d6000c 	.word	0x01d6000c
 c100514:	01d60004 	.word	0x01d60004
 c100518:	01d60000 	.word	0x01d60000

0c10051c <iic_putByte>:

void iic_putByte( uint8 byte ) {
 c10051c:	e1a0c00d 	mov	ip, sp
 c100520:	e92dd800 	push	{fp, ip, lr, pc}
 c100524:	e24cb004 	sub	fp, ip, #4
 c100528:	e24dd008 	sub	sp, sp, #8
 c10052c:	e1a03000 	mov	r3, r0
 c100530:	e54b300d 	strb	r3, [fp, #-13]
    // Escribe el dato
	rIICDS = byte;
 c100534:	e59f303c 	ldr	r3, [pc, #60]	; c100578 <iic_putByte+0x5c>
 c100538:	e55b200d 	ldrb	r2, [fp, #-13]
 c10053c:	e5832000 	str	r2, [r3]

	// Comienza la transmisión del dato (borrando pending bit del IICCON)
	rIICCON &= ~(1<<4);
 c100540:	e59f3034 	ldr	r3, [pc, #52]	; c10057c <iic_putByte+0x60>
 c100544:	e59f2030 	ldr	r2, [pc, #48]	; c10057c <iic_putByte+0x60>
 c100548:	e5922000 	ldr	r2, [r2]
 c10054c:	e3c22010 	bic	r2, r2, #16
 c100550:	e5832000 	str	r2, [r3]

    // Espera la recepción de ACK
	while((rIICCON & (1<<4)) == 0x0){}
 c100554:	e1a00000 	nop			; (mov r0, r0)
 c100558:	e59f301c 	ldr	r3, [pc, #28]	; c10057c <iic_putByte+0x60>
 c10055c:	e5933000 	ldr	r3, [r3]
 c100560:	e2033010 	and	r3, r3, #16
 c100564:	e3530000 	cmp	r3, #0
 c100568:	0afffffa 	beq	c100558 <iic_putByte+0x3c>
};
 c10056c:	e24bd00c 	sub	sp, fp, #12
 c100570:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100574:	e12fff1e 	bx	lr
 c100578:	01d6000c 	.word	0x01d6000c
 c10057c:	01d60000 	.word	0x01d60000

0c100580 <iic_putByte_stop>:

void iic_putByte_stop( uint8 byte ) {
 c100580:	e1a0c00d 	mov	ip, sp
 c100584:	e92dd800 	push	{fp, ip, lr, pc}
 c100588:	e24cb004 	sub	fp, ip, #4
 c10058c:	e24dd008 	sub	sp, sp, #8
 c100590:	e1a03000 	mov	r3, r0
 c100594:	e54b300d 	strb	r3, [fp, #-13]
    // Escribe el dato
	rIICDS = byte;
 c100598:	e59f3064 	ldr	r3, [pc, #100]	; c100604 <iic_putByte_stop+0x84>
 c10059c:	e55b200d 	ldrb	r2, [fp, #-13]
 c1005a0:	e5832000 	str	r2, [r3]

	// Comienza la trasmisión del dato (borrando pending bit del IICCON)
	rIICCON &= ~(1<<4);
 c1005a4:	e59f305c 	ldr	r3, [pc, #92]	; c100608 <iic_putByte_stop+0x88>
 c1005a8:	e59f2058 	ldr	r2, [pc, #88]	; c100608 <iic_putByte_stop+0x88>
 c1005ac:	e5922000 	ldr	r2, [r2]
 c1005b0:	e3c22010 	bic	r2, r2, #16
 c1005b4:	e5832000 	str	r2, [r3]

    // Espera la recepción de ACK
	while((rIICCON & (1<<4)) == 0x0){}
 c1005b8:	e1a00000 	nop			; (mov r0, r0)
 c1005bc:	e59f3044 	ldr	r3, [pc, #68]	; c100608 <iic_putByte_stop+0x88>
 c1005c0:	e5933000 	ldr	r3, [r3]
 c1005c4:	e2033010 	and	r3, r3, #16
 c1005c8:	e3530000 	cmp	r3, #0
 c1005cc:	0afffffa 	beq	c1005bc <iic_putByte_stop+0x3c>
    
    // Máster Tx, stop condition, Tx/Rx habilitada
	rIICSTAT = 0xD0;
 c1005d0:	e59f3034 	ldr	r3, [pc, #52]	; c10060c <iic_putByte_stop+0x8c>
 c1005d4:	e3a020d0 	mov	r2, #208	; 0xd0
 c1005d8:	e5832000 	str	r2, [r3]

    // Comienza la trasmisión de STOP (borrando pending bit del IICCON)
	rIICCON &= ~(1<<4);
 c1005dc:	e59f3024 	ldr	r3, [pc, #36]	; c100608 <iic_putByte_stop+0x88>
 c1005e0:	e59f2020 	ldr	r2, [pc, #32]	; c100608 <iic_putByte_stop+0x88>
 c1005e4:	e5922000 	ldr	r2, [r2]
 c1005e8:	e3c22010 	bic	r2, r2, #16
 c1005ec:	e5832000 	str	r2, [r3]

    // Espera a que la stop condition tenga efecto (5 ms para la at24c04)
	DelayMs(5);
 c1005f0:	e3a00005 	mov	r0, #5
 c1005f4:	eb00016a 	bl	c100ba4 <DelayMs>

}
 c1005f8:	e24bd00c 	sub	sp, fp, #12
 c1005fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100600:	e12fff1e 	bx	lr
 c100604:	01d6000c 	.word	0x01d6000c
 c100608:	01d60000 	.word	0x01d60000
 c10060c:	01d60004 	.word	0x01d60004

0c100610 <iic_getByte_start>:

void iic_getByte_start( uint8 byte ) {
 c100610:	e1a0c00d 	mov	ip, sp
 c100614:	e92dd800 	push	{fp, ip, lr, pc}
 c100618:	e24cb004 	sub	fp, ip, #4
 c10061c:	e24dd008 	sub	sp, sp, #8
 c100620:	e1a03000 	mov	r3, r0
 c100624:	e54b300d 	strb	r3, [fp, #-13]
	// Escribe el dato
	rIICDS = byte;
 c100628:	e59f3048 	ldr	r3, [pc, #72]	; c100678 <iic_getByte_start+0x68>
 c10062c:	e55b200d 	ldrb	r2, [fp, #-13]
 c100630:	e5832000 	str	r2, [r3]

    // Máster Rx, start condition, Tx/Rx habilitada
	rIICSTAT = 0xB0;
 c100634:	e59f3040 	ldr	r3, [pc, #64]	; c10067c <iic_getByte_start+0x6c>
 c100638:	e3a020b0 	mov	r2, #176	; 0xb0
 c10063c:	e5832000 	str	r2, [r3]

    // Comienza la transmisión (borrando pending bit del IICCON)
	rIICCON &= ~(1<<4);
 c100640:	e59f3038 	ldr	r3, [pc, #56]	; c100680 <iic_getByte_start+0x70>
 c100644:	e59f2034 	ldr	r2, [pc, #52]	; c100680 <iic_getByte_start+0x70>
 c100648:	e5922000 	ldr	r2, [r2]
 c10064c:	e3c22010 	bic	r2, r2, #16
 c100650:	e5832000 	str	r2, [r3]

    // Espera la rececpión de ACK
	while((rIICCON & (1<<4)) == 0x0){}
 c100654:	e1a00000 	nop			; (mov r0, r0)
 c100658:	e59f3020 	ldr	r3, [pc, #32]	; c100680 <iic_getByte_start+0x70>
 c10065c:	e5933000 	ldr	r3, [r3]
 c100660:	e2033010 	and	r3, r3, #16
 c100664:	e3530000 	cmp	r3, #0
 c100668:	0afffffa 	beq	c100658 <iic_getByte_start+0x48>
}
 c10066c:	e24bd00c 	sub	sp, fp, #12
 c100670:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100674:	e12fff1e 	bx	lr
 c100678:	01d6000c 	.word	0x01d6000c
 c10067c:	01d60004 	.word	0x01d60004
 c100680:	01d60000 	.word	0x01d60000

0c100684 <iic_getByte>:

uint8 iic_getByte( void ) {
 c100684:	e1a0c00d 	mov	ip, sp
 c100688:	e92dd800 	push	{fp, ip, lr, pc}
 c10068c:	e24cb004 	sub	fp, ip, #4
    // Reanuda la recepción (borrando pending bit del IICCON)
	rIICCON &= ~(1<<4);
 c100690:	e59f3040 	ldr	r3, [pc, #64]	; c1006d8 <iic_getByte+0x54>
 c100694:	e59f203c 	ldr	r2, [pc, #60]	; c1006d8 <iic_getByte+0x54>
 c100698:	e5922000 	ldr	r2, [r2]
 c10069c:	e3c22010 	bic	r2, r2, #16
 c1006a0:	e5832000 	str	r2, [r3]

	// Espera la recepción del dato
	while((rIICCON & (1<<4)) == 0x0){}
 c1006a4:	e1a00000 	nop			; (mov r0, r0)
 c1006a8:	e59f3028 	ldr	r3, [pc, #40]	; c1006d8 <iic_getByte+0x54>
 c1006ac:	e5933000 	ldr	r3, [r3]
 c1006b0:	e2033010 	and	r3, r3, #16
 c1006b4:	e3530000 	cmp	r3, #0
 c1006b8:	0afffffa 	beq	c1006a8 <iic_getByte+0x24>

    return rIICDS;// Lee el dato
 c1006bc:	e59f3018 	ldr	r3, [pc, #24]	; c1006dc <iic_getByte+0x58>
 c1006c0:	e5933000 	ldr	r3, [r3]
 c1006c4:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c1006c8:	e1a00003 	mov	r0, r3
 c1006cc:	e24bd00c 	sub	sp, fp, #12
 c1006d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006d4:	e12fff1e 	bx	lr
 c1006d8:	01d60000 	.word	0x01d60000
 c1006dc:	01d6000c 	.word	0x01d6000c

0c1006e0 <iic_getByte_stop>:

uint8 iic_getByte_stop( int8 ack ) {
 c1006e0:	e1a0c00d 	mov	ip, sp
 c1006e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1006e8:	e24cb004 	sub	fp, ip, #4
 c1006ec:	e24dd010 	sub	sp, sp, #16
 c1006f0:	e1a03000 	mov	r3, r0
 c1006f4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint8 byte;

    rIICCON = (rIICCON & ~(1 << 7)) | (ack << 7); // Habilita/deshabilita la generación de ACK
 c1006f8:	e59f30a0 	ldr	r3, [pc, #160]	; c1007a0 <iic_getByte_stop+0xc0>
 c1006fc:	e59f209c 	ldr	r2, [pc, #156]	; c1007a0 <iic_getByte_stop+0xc0>
 c100700:	e5922000 	ldr	r2, [r2]
 c100704:	e3c21080 	bic	r1, r2, #128	; 0x80
 c100708:	e15b21d5 	ldrsb	r2, [fp, #-21]	; 0xffffffeb
 c10070c:	e1a02382 	lsl	r2, r2, #7
 c100710:	e1812002 	orr	r2, r1, r2
 c100714:	e5832000 	str	r2, [r3]

    // Reanuda la recepción (borrando pending bit del IICCON)
    rIICCON &= ~(1<<4);
 c100718:	e59f3080 	ldr	r3, [pc, #128]	; c1007a0 <iic_getByte_stop+0xc0>
 c10071c:	e59f207c 	ldr	r2, [pc, #124]	; c1007a0 <iic_getByte_stop+0xc0>
 c100720:	e5922000 	ldr	r2, [r2]
 c100724:	e3c22010 	bic	r2, r2, #16
 c100728:	e5832000 	str	r2, [r3]
	
	// Espera la recepción del dato
    while((rIICCON & (1<<4)) == 0x0){}
 c10072c:	e1a00000 	nop			; (mov r0, r0)
 c100730:	e59f3068 	ldr	r3, [pc, #104]	; c1007a0 <iic_getByte_stop+0xc0>
 c100734:	e5933000 	ldr	r3, [r3]
 c100738:	e2033010 	and	r3, r3, #16
 c10073c:	e3530000 	cmp	r3, #0
 c100740:	0afffffa 	beq	c100730 <iic_getByte_stop+0x50>
	
    byte = rIICDS;	// Lee el dato
 c100744:	e59f3058 	ldr	r3, [pc, #88]	; c1007a4 <iic_getByte_stop+0xc4>
 c100748:	e5933000 	ldr	r3, [r3]
 c10074c:	e54b300d 	strb	r3, [fp, #-13]

   	// Máster Rx, stop condition, Tx/Rx habilitada
    rIICSTAT = 0x90;
 c100750:	e59f3050 	ldr	r3, [pc, #80]	; c1007a8 <iic_getByte_stop+0xc8>
 c100754:	e3a02090 	mov	r2, #144	; 0x90
 c100758:	e5832000 	str	r2, [r3]

   	// Comienza la trasmisión de STOP (borrando pending bit del IICCON)
    rIICCON &= ~(1<<4);
 c10075c:	e59f303c 	ldr	r3, [pc, #60]	; c1007a0 <iic_getByte_stop+0xc0>
 c100760:	e59f2038 	ldr	r2, [pc, #56]	; c1007a0 <iic_getByte_stop+0xc0>
 c100764:	e5922000 	ldr	r2, [r2]
 c100768:	e3c22010 	bic	r2, r2, #16
 c10076c:	e5832000 	str	r2, [r3]

   	// Espera a que la stop condition tenga efecto (5 ms para la at24c04)
    DelayMs(5);
 c100770:	e3a00005 	mov	r0, #5
 c100774:	eb00010a 	bl	c100ba4 <DelayMs>

	rIICCON |= (1<<7); // Habilita la generación de ACK
 c100778:	e59f3020 	ldr	r3, [pc, #32]	; c1007a0 <iic_getByte_stop+0xc0>
 c10077c:	e59f201c 	ldr	r2, [pc, #28]	; c1007a0 <iic_getByte_stop+0xc0>
 c100780:	e5922000 	ldr	r2, [r2]
 c100784:	e3822080 	orr	r2, r2, #128	; 0x80
 c100788:	e5832000 	str	r2, [r3]
   	return byte;
 c10078c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c100790:	e1a00003 	mov	r0, r3
 c100794:	e24bd00c 	sub	sp, fp, #12
 c100798:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10079c:	e12fff1e 	bx	lr
 c1007a0:	01d60000 	.word	0x01d60000
 c1007a4:	01d6000c 	.word	0x01d6000c
 c1007a8:	01d60004 	.word	0x01d60004

0c1007ac <start>:
	.global start
    .extern Main
    .equ STACK, 0x0C7FF000

start: 
    LDR SP,=STACK
 c1007ac:	e59fd00c 	ldr	sp, [pc, #12]	; c1007c0 <End+0x4>
    MOV FP,#0
 c1007b0:	e3a0b000 	mov	fp, #0
    
    MOV LR,PC
 c1007b4:	e1a0e00f 	mov	lr, pc
    LDR PC,=Main
 c1007b8:	e59ff004 	ldr	pc, [pc, #4]	; c1007c4 <End+0x8>

0c1007bc <End>:

End:
    B End
 c1007bc:	eafffffe 	b	c1007bc <End>
 c1007c0:	0c7ff000 	.word	0x0c7ff000
 c1007c4:	0c100b1c 	.word	0x0c100b1c

0c1007c8 <keyboard_init>:

extern int estado;
extern uint16 direccion;
extern uint8 dato;

void keyboard_init() {
 c1007c8:	e1a0c00d 	mov	ip, sp
 c1007cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1007d0:	e24cb004 	sub	fp, ip, #4
	/* Configurar el puerto G (si no lo estuviese ya) */	

		// Establece la funcion de los pines (EINT0-7)
		rPCONG = 0xffff;
 c1007d4:	e59f3078 	ldr	r3, [pc, #120]	; c100854 <keyboard_init+0x8c>
 c1007d8:	e59f2078 	ldr	r2, [pc, #120]	; c100858 <keyboard_init+0x90>
 c1007dc:	e5832000 	str	r2, [r3]

		// Habilita el "pull up" del puerto
		rPUPG = 0;
 c1007e0:	e59f3074 	ldr	r3, [pc, #116]	; c10085c <keyboard_init+0x94>
 c1007e4:	e3a02000 	mov	r2, #0
 c1007e8:	e5832000 	str	r2, [r3]

		// Configura las lineas de int. como de flanco de bajada mediante EXTINT
		rEXTINT = 0x33333333;
 c1007ec:	e59f306c 	ldr	r3, [pc, #108]	; c100860 <keyboard_init+0x98>
 c1007f0:	e59f206c 	ldr	r2, [pc, #108]	; c100864 <keyboard_init+0x9c>
 c1007f4:	e5832000 	str	r2, [r3]

	/* Establece la rutina de servicio para EINT1 */
		pISR_EINT1 = (unsigned) KeyboardInt;
 c1007f8:	e59f3068 	ldr	r3, [pc, #104]	; c100868 <keyboard_init+0xa0>
 c1007fc:	e59f2068 	ldr	r2, [pc, #104]	; c10086c <keyboard_init+0xa4>
 c100800:	e5832000 	str	r2, [r3]

	/* Configurar controlador de interrupciones */

		// Borra INTPND escribiendo 1s en I_ISPC
		rI_ISPC = BIT_EINT1;
 c100804:	e59f3064 	ldr	r3, [pc, #100]	; c100870 <keyboard_init+0xa8>
 c100808:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c10080c:	e5832000 	str	r2, [r3]

		// Configura las lineas como de tipo IRQ mediante INTMOD
		rINTMOD = 0x0;
 c100810:	e59f305c 	ldr	r3, [pc, #92]	; c100874 <keyboard_init+0xac>
 c100814:	e3a02000 	mov	r2, #0
 c100818:	e5832000 	str	r2, [r3]

		// Habilita int. vectorizadas y la linea IRQ (FIQ no) mediante INTCON
		rINTCON = 0x1;
 c10081c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100820:	e3a02001 	mov	r2, #1
 c100824:	e5832000 	str	r2, [r3]

	/* Habilitar linea EINT1 */
	rINTMSK = rINTMSK & ~(BIT_EINT1);
 c100828:	e59f3048 	ldr	r3, [pc, #72]	; c100878 <keyboard_init+0xb0>
 c10082c:	e59f2044 	ldr	r2, [pc, #68]	; c100878 <keyboard_init+0xb0>
 c100830:	e5922000 	ldr	r2, [r2]
 c100834:	e3c22401 	bic	r2, r2, #16777216	; 0x1000000
 c100838:	e5832000 	str	r2, [r3]

	/* Por precaucion, se vuelven a borrar los bits de INTPND correspondientes*/
	rI_ISPC = BIT_EINT1;
 c10083c:	e59f302c 	ldr	r3, [pc, #44]	; c100870 <keyboard_init+0xa8>
 c100840:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c100844:	e5832000 	str	r2, [r3]
}
 c100848:	e24bd00c 	sub	sp, fp, #12
 c10084c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100850:	e12fff1e 	bx	lr
 c100854:	01d20040 	.word	0x01d20040
 c100858:	0000ffff 	.word	0x0000ffff
 c10085c:	01d20048 	.word	0x01d20048
 c100860:	01d20050 	.word	0x01d20050
 c100864:	33333333 	.word	0x33333333
 c100868:	0c7fff80 	.word	0x0c7fff80
 c10086c:	0c10087c 	.word	0x0c10087c
 c100870:	01e00024 	.word	0x01e00024
 c100874:	01e00008 	.word	0x01e00008
 c100878:	01e0000c 	.word	0x01e0000c

0c10087c <KeyboardInt>:

void KeyboardInt(void) {
 c10087c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c100880:	e1a0c00d 	mov	ip, sp
 c100884:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c100888:	e24cb004 	sub	fp, ip, #4
 c10088c:	e24dd008 	sub	sp, sp, #8

	/* Esperar trp mediante la funcion DelayMs() */
	DelayMs(20);
 c100890:	e3a00014 	mov	r0, #20
 c100894:	eb0000c2 	bl	c100ba4 <DelayMs>

	/* Identificar la tecla */
	int key = key_read();
 c100898:	eb00004f 	bl	c1009dc <key_read>
 c10089c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0


	/* Si la tecla se ha identificado, visualizarla en el 8SEG */
	if(key > -1) {
 c1008a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1008a4:	e3530000 	cmp	r3, #0
 c1008a8:	ba000037 	blt	c10098c <KeyboardInt+0x110>
		switch(estado) {
 c1008ac:	e59f3114 	ldr	r3, [pc, #276]	; c1009c8 <KeyboardInt+0x14c>
 c1008b0:	e5933000 	ldr	r3, [r3]
 c1008b4:	e2433001 	sub	r3, r3, #1
 c1008b8:	e3530003 	cmp	r3, #3
 c1008bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c1008c0:	ea00002d 	b	c10097c <KeyboardInt+0x100>
 c1008c4:	0c1008d4 	.word	0x0c1008d4
 c1008c8:	0c1008f8 	.word	0x0c1008f8
 c1008cc:	0c100934 	.word	0x0c100934
 c1008d0:	0c100950 	.word	0x0c100950
			case 1:
				direccion = (key<<4);
 c1008d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1008d8:	e1a03803 	lsl	r3, r3, #16
 c1008dc:	e1a03823 	lsr	r3, r3, #16
 c1008e0:	e1a03203 	lsl	r3, r3, #4
 c1008e4:	e1a03803 	lsl	r3, r3, #16
 c1008e8:	e1a02823 	lsr	r2, r3, #16
 c1008ec:	e59f30d8 	ldr	r3, [pc, #216]	; c1009cc <KeyboardInt+0x150>
 c1008f0:	e1c320b0 	strh	r2, [r3]
			break;
 c1008f4:	ea000021 	b	c100980 <KeyboardInt+0x104>
			case 2:
				direccion = direccion | key;
 c1008f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1008fc:	e1a03803 	lsl	r3, r3, #16
 c100900:	e1a02823 	lsr	r2, r3, #16
 c100904:	e59f30c0 	ldr	r3, [pc, #192]	; c1009cc <KeyboardInt+0x150>
 c100908:	e1d330b0 	ldrh	r3, [r3]
 c10090c:	e1a03803 	lsl	r3, r3, #16
 c100910:	e1a03823 	lsr	r3, r3, #16
 c100914:	e1823003 	orr	r3, r2, r3
 c100918:	e1a03803 	lsl	r3, r3, #16
 c10091c:	e1a03823 	lsr	r3, r3, #16
 c100920:	e1a03803 	lsl	r3, r3, #16
 c100924:	e1a02823 	lsr	r2, r3, #16
 c100928:	e59f309c 	ldr	r3, [pc, #156]	; c1009cc <KeyboardInt+0x150>
 c10092c:	e1c320b0 	strh	r2, [r3]
			break;
 c100930:	ea000012 	b	c100980 <KeyboardInt+0x104>
			case 3:
				dato = (key<<4);
 c100934:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100938:	e20330ff 	and	r3, r3, #255	; 0xff
 c10093c:	e1a03203 	lsl	r3, r3, #4
 c100940:	e20320ff 	and	r2, r3, #255	; 0xff
 c100944:	e59f3084 	ldr	r3, [pc, #132]	; c1009d0 <KeyboardInt+0x154>
 c100948:	e5c32000 	strb	r2, [r3]
			break;
 c10094c:	ea00000b 	b	c100980 <KeyboardInt+0x104>
			case 4:
				dato = dato | key;
 c100950:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100954:	e20320ff 	and	r2, r3, #255	; 0xff
 c100958:	e59f3070 	ldr	r3, [pc, #112]	; c1009d0 <KeyboardInt+0x154>
 c10095c:	e5d33000 	ldrb	r3, [r3]
 c100960:	e20330ff 	and	r3, r3, #255	; 0xff
 c100964:	e1823003 	orr	r3, r2, r3
 c100968:	e20330ff 	and	r3, r3, #255	; 0xff
 c10096c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100970:	e59f3058 	ldr	r3, [pc, #88]	; c1009d0 <KeyboardInt+0x154>
 c100974:	e5c32000 	strb	r2, [r3]
			break;
 c100978:	ea000000 	b	c100980 <KeyboardInt+0x104>
			default: break;
 c10097c:	e1a00000 	nop			; (mov r0, r0)

		}
		D8Led_symbol(key);
 c100980:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c100984:	ebfffda6 	bl	c100024 <D8Led_symbol>
	}

	/* Esperar a se libere la tecla: consultar bit 1 del registro de datos del puerto G */
	while ( (rPDATG & 0x00000002) == 0 ){}
 c100988:	ea000000 	b	c100990 <KeyboardInt+0x114>
 c10098c:	e1a00000 	nop			; (mov r0, r0)
 c100990:	e59f303c 	ldr	r3, [pc, #60]	; c1009d4 <KeyboardInt+0x158>
 c100994:	e5933000 	ldr	r3, [r3]
 c100998:	e2033002 	and	r3, r3, #2
 c10099c:	e3530000 	cmp	r3, #0
 c1009a0:	0afffffa 	beq	c100990 <KeyboardInt+0x114>

	/* Esperar trd mediante la funcion Delay() */
	DelayMs(100);
 c1009a4:	e3a00064 	mov	r0, #100	; 0x64
 c1009a8:	eb00007d 	bl	c100ba4 <DelayMs>

	/* Borrar interrupción de teclado */
	rI_ISPC = BIT_EINT1;
 c1009ac:	e59f3024 	ldr	r3, [pc, #36]	; c1009d8 <KeyboardInt+0x15c>
 c1009b0:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c1009b4:	e5832000 	str	r2, [r3]

}
 c1009b8:	e24bd01c 	sub	sp, fp, #28
 c1009bc:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1009c0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1009c4:	e25ef004 	subs	pc, lr, #4
 c1009c8:	0c100f20 	.word	0x0c100f20
 c1009cc:	0c100f1c 	.word	0x0c100f1c
 c1009d0:	0c100f24 	.word	0x0c100f24
 c1009d4:	01d20044 	.word	0x01d20044
 c1009d8:	01e00024 	.word	0x01e00024

0c1009dc <key_read>:
int key_read() {
 c1009dc:	e1a0c00d 	mov	ip, sp
 c1009e0:	e92dd800 	push	{fp, ip, lr, pc}
 c1009e4:	e24cb004 	sub	fp, ip, #4
 c1009e8:	e24dd010 	sub	sp, sp, #16

	int value= -1;
 c1009ec:	e3e03000 	mvn	r3, #0
 c1009f0:	e50b3010 	str	r3, [fp, #-16]
	char temp;

	UCHAR values[] = {0xfd, 0xfb, 0xf7, 0xef};
 c1009f4:	e59f3118 	ldr	r3, [pc, #280]	; c100b14 <key_read+0x138>
 c1009f8:	e5933000 	ldr	r3, [r3]
 c1009fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	int i;
	for(i=0;i<4;i++) {
 c100a00:	e3a03000 	mov	r3, #0
 c100a04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100a08:	ea000039 	b	c100af4 <key_read+0x118>

		temp = *(keyboard_base + values[i]) & KEY_VALUE_MASK;
 c100a0c:	e59f3104 	ldr	r3, [pc, #260]	; c100b18 <key_read+0x13c>
 c100a10:	e5932000 	ldr	r2, [r3]
 c100a14:	e3e0300f 	mvn	r3, #15
 c100a18:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c100a1c:	e24b000c 	sub	r0, fp, #12
 c100a20:	e0801001 	add	r1, r0, r1
 c100a24:	e0813003 	add	r3, r1, r3
 c100a28:	e5d33000 	ldrb	r3, [r3]
 c100a2c:	e0823003 	add	r3, r2, r3
 c100a30:	e5d33000 	ldrb	r3, [r3]
 c100a34:	e20330ff 	and	r3, r3, #255	; 0xff
 c100a38:	e203300f 	and	r3, r3, #15
 c100a3c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		switch (temp) {
 c100a40:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100a44:	e2433007 	sub	r3, r3, #7
 c100a48:	e3530007 	cmp	r3, #7
 c100a4c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100a50:	ea000024 	b	c100ae8 <key_read+0x10c>
 c100a54:	0c100a74 	.word	0x0c100a74
 c100a58:	0c100ae8 	.word	0x0c100ae8
 c100a5c:	0c100ae8 	.word	0x0c100ae8
 c100a60:	0c100ae8 	.word	0x0c100ae8
 c100a64:	0c100a88 	.word	0x0c100a88
 c100a68:	0c100ae8 	.word	0x0c100ae8
 c100a6c:	0c100aa8 	.word	0x0c100aa8
 c100a70:	0c100ac8 	.word	0x0c100ac8
			case 0x7:  value = 12-i*4; break;
 c100a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100a78:	e2633003 	rsb	r3, r3, #3
 c100a7c:	e1a03103 	lsl	r3, r3, #2
 c100a80:	e50b3010 	str	r3, [fp, #-16]
 c100a84:	ea000017 	b	c100ae8 <key_read+0x10c>
			case 0xB:  value = 13-i*4; break;
 c100a88:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c100a8c:	e1a03002 	mov	r3, r2
 c100a90:	e1a03f03 	lsl	r3, r3, #30
 c100a94:	e0623003 	rsb	r3, r2, r3
 c100a98:	e1a03103 	lsl	r3, r3, #2
 c100a9c:	e283300d 	add	r3, r3, #13
 c100aa0:	e50b3010 	str	r3, [fp, #-16]
 c100aa4:	ea00000f 	b	c100ae8 <key_read+0x10c>
			case 0xD:  value = 14-i*4; break;
 c100aa8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c100aac:	e1a03002 	mov	r3, r2
 c100ab0:	e1a03f03 	lsl	r3, r3, #30
 c100ab4:	e0623003 	rsb	r3, r2, r3
 c100ab8:	e1a03103 	lsl	r3, r3, #2
 c100abc:	e283300e 	add	r3, r3, #14
 c100ac0:	e50b3010 	str	r3, [fp, #-16]
 c100ac4:	ea000007 	b	c100ae8 <key_read+0x10c>
			case 0xE:  value = 15-i*4; break;
 c100ac8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c100acc:	e1a03002 	mov	r3, r2
 c100ad0:	e1a03f03 	lsl	r3, r3, #30
 c100ad4:	e0623003 	rsb	r3, r2, r3
 c100ad8:	e1a03103 	lsl	r3, r3, #2
 c100adc:	e283300f 	add	r3, r3, #15
 c100ae0:	e50b3010 	str	r3, [fp, #-16]
 c100ae4:	e1a00000 	nop			; (mov r0, r0)
	char temp;

	UCHAR values[] = {0xfd, 0xfb, 0xf7, 0xef};

	int i;
	for(i=0;i<4;i++) {
 c100ae8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100aec:	e2833001 	add	r3, r3, #1
 c100af0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100af8:	e3530003 	cmp	r3, #3
 c100afc:	daffffc2 	ble	c100a0c <key_read+0x30>
		}

	}
	

	return value;
 c100b00:	e51b3010 	ldr	r3, [fp, #-16]

}
 c100b04:	e1a00003 	mov	r0, r3
 c100b08:	e24bd00c 	sub	sp, fp, #12
 c100b0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b10:	e12fff1e 	bx	lr
 c100b14:	0c100ec0 	.word	0x0c100ec0
 c100b18:	0c100f04 	.word	0x0c100f04

0c100b1c <Main>:
uint16 direccion;
uint8 dato;


void Main( void )
{
 c100b1c:	e1a0c00d 	mov	ip, sp
 c100b20:	e92dd800 	push	{fp, ip, lr, pc}
 c100b24:	e24cb004 	sub	fp, ip, #4
 c100b28:	e24ddc02 	sub	sp, sp, #512	; 0x200

	estado = 0;
 c100b2c:	e59f305c 	ldr	r3, [pc, #92]	; c100b90 <Main+0x74>
 c100b30:	e3a02000 	mov	r2, #0
 c100b34:	e5832000 	str	r2, [r3]
	direccion = 0;
 c100b38:	e59f3054 	ldr	r3, [pc, #84]	; c100b94 <Main+0x78>
 c100b3c:	e3a02000 	mov	r2, #0
 c100b40:	e1c320b0 	strh	r2, [r3]
	dato = 0;
 c100b44:	e59f304c 	ldr	r3, [pc, #76]	; c100b98 <Main+0x7c>
 c100b48:	e3a02000 	mov	r2, #0
 c100b4c:	e5c32000 	strb	r2, [r3]
    uint8 buffer[AT24C04_DEPTH];
    uint16 i;
    
    sys_init();
 c100b50:	eb00002b 	bl	c100c04 <sys_init>

    //Inicializamos los botones
    rPCONG = rPCONG & 0xffff0fff;
 c100b54:	e59f3040 	ldr	r3, [pc, #64]	; c100b9c <Main+0x80>
 c100b58:	e59f203c 	ldr	r2, [pc, #60]	; c100b9c <Main+0x80>
 c100b5c:	e5922000 	ldr	r2, [r2]
 c100b60:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c100b64:	e5832000 	str	r2, [r3]
    rPUPG = 0;
 c100b68:	e59f3030 	ldr	r3, [pc, #48]	; c100ba0 <Main+0x84>
 c100b6c:	e3a02000 	mov	r2, #0
 c100b70:	e5832000 	str	r2, [r3]

    Eint4567_init();
 c100b74:	ebfffd85 	bl	c100190 <Eint4567_init>

    keyboard_init();
 c100b78:	ebffff12 	bl	c1007c8 <keyboard_init>
    iic_init();
 c100b7c:	ebfffe17 	bl	c1003e0 <iic_init>

    D8Led_init();
 c100b80:	ebfffd1e 	bl	c100000 <D8Led_init>
    D8Led_symbol(0);
 c100b84:	e3a00000 	mov	r0, #0
 c100b88:	ebfffd25 	bl	c100024 <D8Led_symbol>

    while( 1 ) {}
 c100b8c:	eafffffe 	b	c100b8c <Main+0x70>
 c100b90:	0c100f20 	.word	0x0c100f20
 c100b94:	0c100f1c 	.word	0x0c100f1c
 c100b98:	0c100f24 	.word	0x0c100f24
 c100b9c:	01d20040 	.word	0x01d20040
 c100ba0:	01d20048 	.word	0x01d20048

0c100ba4 <DelayMs>:
 c100ba4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 c100ba8:	e28db000 	add	fp, sp, #0
 c100bac:	e24dd014 	sub	sp, sp, #20
 c100bb0:	e50b0010 	str	r0, [fp, #-16]
 c100bb4:	e3a03000 	mov	r3, #0
 c100bb8:	e50b3008 	str	r3, [fp, #-8]
 c100bbc:	ea000002 	b	c100bcc <DelayMs+0x28>
 c100bc0:	e51b3008 	ldr	r3, [fp, #-8]
 c100bc4:	e2833001 	add	r3, r3, #1
 c100bc8:	e50b3008 	str	r3, [fp, #-8]
 c100bcc:	e51b2010 	ldr	r2, [fp, #-16]
 c100bd0:	e1a03002 	mov	r3, r2
 c100bd4:	e1a03283 	lsl	r3, r3, #5
 c100bd8:	e0623003 	rsb	r3, r2, r3
 c100bdc:	e1a03103 	lsl	r3, r3, #2
 c100be0:	e0833002 	add	r3, r3, r2
 c100be4:	e1a03183 	lsl	r3, r3, #3
 c100be8:	e1a02003 	mov	r2, r3
 c100bec:	e51b3008 	ldr	r3, [fp, #-8]
 c100bf0:	e1520003 	cmp	r2, r3
 c100bf4:	cafffff1 	bgt	c100bc0 <DelayMs+0x1c>
 c100bf8:	e28bd000 	add	sp, fp, #0
 c100bfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 c100c00:	e12fff1e 	bx	lr

0c100c04 <sys_init>:
 c100c04:	e92d4800 	push	{fp, lr}
 c100c08:	e28db004 	add	fp, sp, #4
 c100c0c:	e59f30e0 	ldr	r3, [pc, #224]	; c100cf4 <sys_init+0xf0>
 c100c10:	e3a02000 	mov	r2, #0
 c100c14:	e5832000 	str	r2, [r3]
 c100c18:	e59f30d8 	ldr	r3, [pc, #216]	; c100cf8 <sys_init+0xf4>
 c100c1c:	e3e02000 	mvn	r2, #0
 c100c20:	e5832000 	str	r2, [r3]
 c100c24:	e59f30d0 	ldr	r3, [pc, #208]	; c100cfc <sys_init+0xf8>
 c100c28:	e59f20d0 	ldr	r2, [pc, #208]	; c100d00 <sys_init+0xfc>
 c100c2c:	e5832000 	str	r2, [r3]
 c100c30:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c100c34:	e59f20c8 	ldr	r2, [pc, #200]	; c100d04 <sys_init+0x100>
 c100c38:	e5832000 	str	r2, [r3]
 c100c3c:	e59f30c4 	ldr	r3, [pc, #196]	; c100d08 <sys_init+0x104>
 c100c40:	e59f20c4 	ldr	r2, [pc, #196]	; c100d0c <sys_init+0x108>
 c100c44:	e5832000 	str	r2, [r3]
 c100c48:	e59f30c0 	ldr	r3, [pc, #192]	; c100d10 <sys_init+0x10c>
 c100c4c:	e3a02008 	mov	r2, #8
 c100c50:	e5832000 	str	r2, [r3]
 c100c54:	e59f30b8 	ldr	r3, [pc, #184]	; c100d14 <sys_init+0x110>
 c100c58:	e59f20b8 	ldr	r2, [pc, #184]	; c100d18 <sys_init+0x114>
 c100c5c:	e5832000 	str	r2, [r3]
 c100c60:	e59f30b4 	ldr	r3, [pc, #180]	; c100d1c <sys_init+0x118>
 c100c64:	e3a02d12 	mov	r2, #1152	; 0x480
 c100c68:	e5832000 	str	r2, [r3]
 c100c6c:	e59f3094 	ldr	r3, [pc, #148]	; c100d08 <sys_init+0x104>
 c100c70:	e5932000 	ldr	r2, [r3]
 c100c74:	e59f30a4 	ldr	r3, [pc, #164]	; c100d20 <sys_init+0x11c>
 c100c78:	e5832000 	str	r2, [r3]
 c100c7c:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c100c80:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c100c84:	e5832000 	str	r2, [r3]
 c100c88:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c100c8c:	e3a02000 	mov	r2, #0
 c100c90:	e5832000 	str	r2, [r3]
 c100c94:	e59f3088 	ldr	r3, [pc, #136]	; c100d24 <sys_init+0x120>
 c100c98:	e59f2088 	ldr	r2, [pc, #136]	; c100d28 <sys_init+0x124>
 c100c9c:	e5832000 	str	r2, [r3]
 c100ca0:	e59f3084 	ldr	r3, [pc, #132]	; c100d2c <sys_init+0x128>
 c100ca4:	e59f2084 	ldr	r2, [pc, #132]	; c100d30 <sys_init+0x12c>
 c100ca8:	e5832000 	str	r2, [r3]
 c100cac:	e59f3080 	ldr	r3, [pc, #128]	; c100d34 <sys_init+0x130>
 c100cb0:	e3a02000 	mov	r2, #0
 c100cb4:	e5832000 	str	r2, [r3]
 c100cb8:	e59f3078 	ldr	r3, [pc, #120]	; c100d38 <sys_init+0x134>
 c100cbc:	e3e02000 	mvn	r2, #0
 c100cc0:	e5832000 	str	r2, [r3]
 c100cc4:	e59f3070 	ldr	r3, [pc, #112]	; c100d3c <sys_init+0x138>
 c100cc8:	e3e02000 	mvn	r2, #0
 c100ccc:	e5832000 	str	r2, [r3]
 c100cd0:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100cd4:	e3a02001 	mov	r2, #1
 c100cd8:	e5832000 	str	r2, [r3]
 c100cdc:	e59f305c 	ldr	r3, [pc, #92]	; c100d40 <sys_init+0x13c>
 c100ce0:	e1a0e00f 	mov	lr, pc
 c100ce4:	e12fff13 	bx	r3
 c100ce8:	e24bd004 	sub	sp, fp, #4
 c100cec:	e8bd4800 	pop	{fp, lr}
 c100cf0:	e12fff1e 	bx	lr
 c100cf4:	01d30000 	.word	0x01d30000
 c100cf8:	01e0000c 	.word	0x01e0000c
 c100cfc:	01d8000c 	.word	0x01d8000c
 c100d00:	00000fff 	.word	0x00000fff
 c100d04:	00038021 	.word	0x00038021
 c100d08:	0c100f08 	.word	0x0c100f08
 c100d0c:	03d09000 	.word	0x03d09000
 c100d10:	01d80008 	.word	0x01d80008
 c100d14:	0c100f0c 	.word	0x0c100f0c
 c100d18:	0007a120 	.word	0x0007a120
 c100d1c:	01d80004 	.word	0x01d80004
 c100d20:	0c100f10 	.word	0x0c100f10
 c100d24:	01e00014 	.word	0x01e00014
 c100d28:	00001f1b 	.word	0x00001f1b
 c100d2c:	01e00010 	.word	0x01e00010
 c100d30:	1b1b1b1b 	.word	0x1b1b1b1b
 c100d34:	01e00008 	.word	0x01e00008
 c100d38:	01d20054 	.word	0x01d20054
 c100d3c:	01e00024 	.word	0x01e00024
 c100d40:	0c100d44 	.word	0x0c100d44

0c100d44 <port_init>:
 c100d44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
 c100d48:	e28db000 	add	fp, sp, #0
 c100d4c:	e59f3100 	ldr	r3, [pc, #256]	; c100e54 <port_init+0x110>
 c100d50:	e3e02000 	mvn	r2, #0
 c100d54:	e5832000 	str	r2, [r3]
 c100d58:	e59f30f8 	ldr	r3, [pc, #248]	; c100e58 <port_init+0x114>
 c100d5c:	e3a020fe 	mov	r2, #254	; 0xfe
 c100d60:	e5832000 	str	r2, [r3]
 c100d64:	e59f30f0 	ldr	r3, [pc, #240]	; c100e5c <port_init+0x118>
 c100d68:	e3e02000 	mvn	r2, #0
 c100d6c:	e5832000 	str	r2, [r3]
 c100d70:	e59f30e8 	ldr	r3, [pc, #232]	; c100e60 <port_init+0x11c>
 c100d74:	e59f20e8 	ldr	r2, [pc, #232]	; c100e64 <port_init+0x120>
 c100d78:	e5832000 	str	r2, [r3]
 c100d7c:	e59f30e4 	ldr	r3, [pc, #228]	; c100e68 <port_init+0x124>
 c100d80:	e3e02000 	mvn	r2, #0
 c100d84:	e5832000 	str	r2, [r3]
 c100d88:	e59f30dc 	ldr	r3, [pc, #220]	; c100e6c <port_init+0x128>
 c100d8c:	e59f20dc 	ldr	r2, [pc, #220]	; c100e70 <port_init+0x12c>
 c100d90:	e5832000 	str	r2, [r3]
 c100d94:	e59f30d8 	ldr	r3, [pc, #216]	; c100e74 <port_init+0x130>
 c100d98:	e3e02000 	mvn	r2, #0
 c100d9c:	e5832000 	str	r2, [r3]
 c100da0:	e59f30d0 	ldr	r3, [pc, #208]	; c100e78 <port_init+0x134>
 c100da4:	e3e02000 	mvn	r2, #0
 c100da8:	e5832000 	str	r2, [r3]
 c100dac:	e59f30c8 	ldr	r3, [pc, #200]	; c100e7c <port_init+0x138>
 c100db0:	e59f20c8 	ldr	r2, [pc, #200]	; c100e80 <port_init+0x13c>
 c100db4:	e5832000 	str	r2, [r3]
 c100db8:	e59f30c4 	ldr	r3, [pc, #196]	; c100e84 <port_init+0x140>
 c100dbc:	e3e02000 	mvn	r2, #0
 c100dc0:	e5832000 	str	r2, [r3]
 c100dc4:	e59f30bc 	ldr	r3, [pc, #188]	; c100e88 <port_init+0x144>
 c100dc8:	e3e02000 	mvn	r2, #0
 c100dcc:	e5832000 	str	r2, [r3]
 c100dd0:	e59f30b4 	ldr	r3, [pc, #180]	; c100e8c <port_init+0x148>
 c100dd4:	e59f20b4 	ldr	r2, [pc, #180]	; c100e90 <port_init+0x14c>
 c100dd8:	e5832000 	str	r2, [r3]
 c100ddc:	e59f30b0 	ldr	r3, [pc, #176]	; c100e94 <port_init+0x150>
 c100de0:	e3e02000 	mvn	r2, #0
 c100de4:	e5832000 	str	r2, [r3]
 c100de8:	e59f30a8 	ldr	r3, [pc, #168]	; c100e98 <port_init+0x154>
 c100dec:	e3e02000 	mvn	r2, #0
 c100df0:	e5832000 	str	r2, [r3]
 c100df4:	e59f30a0 	ldr	r3, [pc, #160]	; c100e9c <port_init+0x158>
 c100df8:	e59f20a0 	ldr	r2, [pc, #160]	; c100ea0 <port_init+0x15c>
 c100dfc:	e5832000 	str	r2, [r3]
 c100e00:	e59f309c 	ldr	r3, [pc, #156]	; c100ea4 <port_init+0x160>
 c100e04:	e3e02000 	mvn	r2, #0
 c100e08:	e5832000 	str	r2, [r3]
 c100e0c:	e59f3094 	ldr	r3, [pc, #148]	; c100ea8 <port_init+0x164>
 c100e10:	e3e02000 	mvn	r2, #0
 c100e14:	e5832000 	str	r2, [r3]
 c100e18:	e59f308c 	ldr	r3, [pc, #140]	; c100eac <port_init+0x168>
 c100e1c:	e59f205c 	ldr	r2, [pc, #92]	; c100e80 <port_init+0x13c>
 c100e20:	e5832000 	str	r2, [r3]
 c100e24:	e59f3084 	ldr	r3, [pc, #132]	; c100eb0 <port_init+0x16c>
 c100e28:	e3e02000 	mvn	r2, #0
 c100e2c:	e5832000 	str	r2, [r3]
 c100e30:	e59f307c 	ldr	r3, [pc, #124]	; c100eb4 <port_init+0x170>
 c100e34:	e3a02007 	mov	r2, #7
 c100e38:	e5832000 	str	r2, [r3]
 c100e3c:	e59f3074 	ldr	r3, [pc, #116]	; c100eb8 <port_init+0x174>
 c100e40:	e59f2074 	ldr	r2, [pc, #116]	; c100ebc <port_init+0x178>
 c100e44:	e5832000 	str	r2, [r3]
 c100e48:	e28bd000 	add	sp, fp, #0
 c100e4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
 c100e50:	e12fff1e 	bx	lr
 c100e54:	01d20004 	.word	0x01d20004
 c100e58:	01d20000 	.word	0x01d20000
 c100e5c:	01d2000c 	.word	0x01d2000c
 c100e60:	01d20008 	.word	0x01d20008
 c100e64:	0000014f 	.word	0x0000014f
 c100e68:	01d20014 	.word	0x01d20014
 c100e6c:	01d20010 	.word	0x01d20010
 c100e70:	55555555 	.word	0x55555555
 c100e74:	01d20018 	.word	0x01d20018
 c100e78:	01d20020 	.word	0x01d20020
 c100e7c:	01d2001c 	.word	0x01d2001c
 c100e80:	00005555 	.word	0x00005555
 c100e84:	01d20024 	.word	0x01d20024
 c100e88:	01d2002c 	.word	0x01d2002c
 c100e8c:	01d20028 	.word	0x01d20028
 c100e90:	00015555 	.word	0x00015555
 c100e94:	01d20030 	.word	0x01d20030
 c100e98:	01d20038 	.word	0x01d20038
 c100e9c:	01d20034 	.word	0x01d20034
 c100ea0:	00002555 	.word	0x00002555
 c100ea4:	01d2003c 	.word	0x01d2003c
 c100ea8:	01d20044 	.word	0x01d20044
 c100eac:	01d20040 	.word	0x01d20040
 c100eb0:	01d20048 	.word	0x01d20048
 c100eb4:	01d2004c 	.word	0x01d2004c
 c100eb8:	01d20050 	.word	0x01d20050
 c100ebc:	22222222 	.word	0x22222222
