   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"uart.c"
  21              	.Ltext0:
  22              		.file 1 "../uart.c"
 2881              		.align	2
 2882              		.global	Uart_Init
 2884              	Uart_Init:
 2885              	.LFB0:
   1:../uart.c     **** /*********************************************************************************************
   2:../uart.c     **** * Fichero:	uart.c
   3:../uart.c     **** * Autor:	
   4:../uart.c     **** * Descrip:	funciones de UART
   5:../uart.c     **** * Version: <P6-ARM-simple>	
   6:../uart.c     **** *********************************************************************************************/
   7:../uart.c     **** 
   8:../uart.c     **** /*--- ficheros de cabecera ---*/
   9:../uart.c     **** #include "44b.h"
  10:../uart.c     **** #include "uart.h"
  11:../uart.c     **** #include <stdarg.h>
  12:../uart.c     **** #include <stdio.h>
  13:../uart.c     **** 
  14:../uart.c     **** /*--- implementación de las funciones ---*/
  15:../uart.c     **** void Uart_Init(int baud)
  16:../uart.c     **** {
 2886              		.loc 1 16 0
 2887              		.cfi_startproc
 2888              		@ Function supports interworking.
 2889              		@ args = 0, pretend = 0, frame = 8
 2890              		@ frame_needed = 1, uses_anonymous_args = 0
 2891 0000 0DC0A0E1 		mov	ip, sp
 2892              	.LCFI0:
 2893              		.cfi_def_cfa_register 12
 2894 0004 30D82DE9 		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 2895 0008 04B04CE2 		sub	fp, ip, #4
 2896              		.cfi_offset 14, -8
 2897              		.cfi_offset 13, -12
 2898              		.cfi_offset 11, -16
 2899              		.cfi_offset 5, -20
 2900              		.cfi_offset 4, -24
 2901              	.LCFI1:
 2902              		.cfi_def_cfa 11, 4
 2903 000c 08D04DE2 		sub	sp, sp, #8
 2904 0010 18000BE5 		str	r0, [fp, #-24]
  17:../uart.c     **** 
  18:../uart.c     ****     
  19:../uart.c     ****     /* UART0 */
  20:../uart.c     ****     rULCON0=0x3;     // Modo normal, no paridad, 1b stop, 8b char
 2905              		.loc 1 20 0
 2906 0014 1D36A0E3 		mov	r3, #30408704
 2907 0018 0320A0E3 		mov	r2, #3
 2908 001c 002083E5 		str	r2, [r3, #0]
  21:../uart.c     ****     rUCON0=0x205;    // tx=nivel, rx=flanco, no rx-timeout ni rx-error, normal, int/polling 
 2909              		.loc 1 21 0
 2910 0020 30319FE5 		ldr	r3, .L2+8
 2911 0024 30219FE5 		ldr	r2, .L2+12
 2912 0028 002083E5 		str	r2, [r3, #0]
  22:../uart.c     ****     rUBRDIV0=( (int)(MCLK/16./baud + 0.5) -1 ); // formula division de frecuencia
 2913              		.loc 1 22 0
 2914 002c 2C519FE5 		ldr	r5, .L2+16
 2915 0030 18001BE5 		ldr	r0, [fp, #-24]
 2916 0034 FEFFFFEB 		bl	__aeabi_i2d
 2917 0038 0030A0E1 		mov	r3, r0
 2918 003c 0140A0E1 		mov	r4, r1
 2919 0040 421F8FE2 		adr	r1, .L2
 2920 0044 030091E8 		ldmia	r1, {r0-r1}
 2921 0048 0320A0E1 		mov	r2, r3
 2922 004c 0430A0E1 		mov	r3, r4
 2923 0050 FEFFFFEB 		bl	__aeabi_ddiv
 2924 0054 0030A0E1 		mov	r3, r0
 2925 0058 0140A0E1 		mov	r4, r1
 2926 005c 0300A0E1 		mov	r0, r3
 2927 0060 0410A0E1 		mov	r1, r4
 2928 0064 0020A0E3 		mov	r2, #0
 2929 0068 FF35A0E3 		mov	r3, #1069547520
 2930 006c 023683E2 		add	r3, r3, #2097152
 2931 0070 FEFFFFEB 		bl	__aeabi_dadd
 2932 0074 0030A0E1 		mov	r3, r0
 2933 0078 0140A0E1 		mov	r4, r1
 2934 007c 0300A0E1 		mov	r0, r3
 2935 0080 0410A0E1 		mov	r1, r4
 2936 0084 FEFFFFEB 		bl	__aeabi_d2iz
 2937 0088 0030A0E1 		mov	r3, r0
 2938 008c 013043E2 		sub	r3, r3, #1
 2939 0090 003085E5 		str	r3, [r5, #0]
  23:../uart.c     ****     rUFCON0=0x0;     // Desactivar FIFO
 2940              		.loc 1 23 0
 2941 0094 C8309FE5 		ldr	r3, .L2+20
 2942 0098 0020A0E3 		mov	r2, #0
 2943 009c 002083E5 		str	r2, [r3, #0]
  24:../uart.c     ****     rUMCON0=0x0;	 // Desactivar control de flujo
 2944              		.loc 1 24 0
 2945 00a0 C0309FE5 		ldr	r3, .L2+24
 2946 00a4 0020A0E3 		mov	r2, #0
 2947 00a8 002083E5 		str	r2, [r3, #0]
  25:../uart.c     **** 
  26:../uart.c     ****     /* UART1 */
  27:../uart.c     ****     rULCON1=0x3;     // Modo normal, no paridad, 1b stop, 8b char
 2948              		.loc 1 27 0
 2949 00ac B8309FE5 		ldr	r3, .L2+28
 2950 00b0 0320A0E3 		mov	r2, #3
 2951 00b4 002083E5 		str	r2, [r3, #0]
  28:../uart.c     ****     rUCON1=0x205;    // tx=nivel, rx=flanco, no rx-timeout ni rx-error, normal, int/polling
 2952              		.loc 1 28 0
 2953 00b8 B0309FE5 		ldr	r3, .L2+32
 2954 00bc 98209FE5 		ldr	r2, .L2+12
 2955 00c0 002083E5 		str	r2, [r3, #0]
  29:../uart.c     ****     rUBRDIV1=( (int)(MCLK/16./baud + 0.5) -1 ); // formula division de frecuencia
 2956              		.loc 1 29 0
 2957 00c4 A8509FE5 		ldr	r5, .L2+36
 2958 00c8 18001BE5 		ldr	r0, [fp, #-24]
 2959 00cc FEFFFFEB 		bl	__aeabi_i2d
 2960 00d0 0030A0E1 		mov	r3, r0
 2961 00d4 0140A0E1 		mov	r4, r1
 2962 00d8 70108FE2 		adr	r1, .L2
 2963 00dc 030091E8 		ldmia	r1, {r0-r1}
 2964 00e0 0320A0E1 		mov	r2, r3
 2965 00e4 0430A0E1 		mov	r3, r4
 2966 00e8 FEFFFFEB 		bl	__aeabi_ddiv
 2967 00ec 0030A0E1 		mov	r3, r0
 2968 00f0 0140A0E1 		mov	r4, r1
 2969 00f4 0300A0E1 		mov	r0, r3
 2970 00f8 0410A0E1 		mov	r1, r4
 2971 00fc 0020A0E3 		mov	r2, #0
 2972 0100 FF35A0E3 		mov	r3, #1069547520
 2973 0104 023683E2 		add	r3, r3, #2097152
 2974 0108 FEFFFFEB 		bl	__aeabi_dadd
 2975 010c 0030A0E1 		mov	r3, r0
 2976 0110 0140A0E1 		mov	r4, r1
 2977 0114 0300A0E1 		mov	r0, r3
 2978 0118 0410A0E1 		mov	r1, r4
 2979 011c FEFFFFEB 		bl	__aeabi_d2iz
 2980 0120 0030A0E1 		mov	r3, r0
 2981 0124 013043E2 		sub	r3, r3, #1
 2982 0128 003085E5 		str	r3, [r5, #0]
  30:../uart.c     ****     rUFCON1=0x0;	// Desactivar FIFO
 2983              		.loc 1 30 0
 2984 012c 44309FE5 		ldr	r3, .L2+40
 2985 0130 0020A0E3 		mov	r2, #0
 2986 0134 002083E5 		str	r2, [r3, #0]
  31:../uart.c     ****     rUMCON1=0x0;	// Desactivar control de flujo
 2987              		.loc 1 31 0
 2988 0138 3C309FE5 		ldr	r3, .L2+44
 2989 013c 0020A0E3 		mov	r2, #0
 2990 0140 002083E5 		str	r2, [r3, #0]
  32:../uart.c     **** }
 2991              		.loc 1 32 0
 2992 0144 14D04BE2 		sub	sp, fp, #20
 2993 0148 30689DE8 		ldmfd	sp, {r4, r5, fp, sp, lr}
 2994 014c 1EFF2FE1 		bx	lr
 2995              	.L3:
 2996              		.align	3
 2997              	.L2:
 2998 0150 00000000 		.word	0
 2999 0154 80844E41 		.word	1095664768
 3000 0158 0400D001 		.word	30408708
 3001 015c 05020000 		.word	517
 3002 0160 2800D001 		.word	30408744
 3003 0164 0800D001 		.word	30408712
 3004 0168 0C00D001 		.word	30408716
 3005 016c 0040D001 		.word	30425088
 3006 0170 0440D001 		.word	30425092
 3007 0174 2840D001 		.word	30425128
 3008 0178 0840D001 		.word	30425096
 3009 017c 0C40D001 		.word	30425100
 3010              		.cfi_endproc
 3011              	.LFE0:
 3013              		.align	2
 3014              		.global	Uart_Config
 3016              	Uart_Config:
 3017              	.LFB1:
  33:../uart.c     **** 
  34:../uart.c     **** void Uart_Config(void)
  35:../uart.c     **** {
 3018              		.loc 1 35 0
 3019              		.cfi_startproc
 3020              		@ Function supports interworking.
 3021              		@ args = 0, pretend = 0, frame = 0
 3022              		@ frame_needed = 1, uses_anonymous_args = 0
 3023 0180 0DC0A0E1 		mov	ip, sp
 3024              	.LCFI2:
 3025              		.cfi_def_cfa_register 12
 3026 0184 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3027 0188 04B04CE2 		sub	fp, ip, #4
 3028              		.cfi_offset 14, -8
 3029              		.cfi_offset 13, -12
 3030              		.cfi_offset 11, -16
 3031              	.LCFI3:
 3032              		.cfi_def_cfa 11, 4
  36:../uart.c     ****     // Si no se usan interrupciones, no es necesario hacer nada
  37:../uart.c     **** }
 3033              		.loc 1 37 0
 3034 018c 0CD04BE2 		sub	sp, fp, #12
 3035 0190 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3036 0194 1EFF2FE1 		bx	lr
 3037              		.cfi_endproc
 3038              	.LFE1:
 3040              		.align	2
 3041              		.global	Uart_TxEmpty
 3043              	Uart_TxEmpty:
 3044              	.LFB2:
  38:../uart.c     **** 
  39:../uart.c     **** inline void Uart_TxEmpty(void)
  40:../uart.c     **** {
 3045              		.loc 1 40 0
 3046              		.cfi_startproc
 3047              		@ Function supports interworking.
 3048              		@ args = 0, pretend = 0, frame = 0
 3049              		@ frame_needed = 1, uses_anonymous_args = 0
 3050 0198 0DC0A0E1 		mov	ip, sp
 3051              	.LCFI4:
 3052              		.cfi_def_cfa_register 12
 3053 019c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3054 01a0 04B04CE2 		sub	fp, ip, #4
 3055              		.cfi_offset 14, -8
 3056              		.cfi_offset 13, -12
 3057              		.cfi_offset 11, -16
 3058              	.LCFI5:
 3059              		.cfi_def_cfa 11, 4
  41:../uart.c     ****     while (!(rUTRSTAT0 & 0x4)); 	     // esperar a que el shifter de TX se vacie
 3060              		.loc 1 41 0
 3061 01a4 0000A0E1 		mov	r0, r0	@ nop
 3062              	.L6:
 3063              		.loc 1 41 0 is_stmt 0 discriminator 1
 3064 01a8 18309FE5 		ldr	r3, .L7
 3065 01ac 003093E5 		ldr	r3, [r3, #0]
 3066 01b0 043003E2 		and	r3, r3, #4
 3067 01b4 000053E3 		cmp	r3, #0
 3068 01b8 FAFFFF0A 		beq	.L6
  42:../uart.c     **** }
 3069              		.loc 1 42 0 is_stmt 1
 3070 01bc 0CD04BE2 		sub	sp, fp, #12
 3071 01c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3072 01c4 1EFF2FE1 		bx	lr
 3073              	.L8:
 3074              		.align	2
 3075              	.L7:
 3076 01c8 1000D001 		.word	30408720
 3077              		.cfi_endproc
 3078              	.LFE2:
 3080              		.align	2
 3081              		.global	Uart_Getch
 3083              	Uart_Getch:
 3084              	.LFB3:
  43:../uart.c     **** 
  44:../uart.c     **** 
  45:../uart.c     **** char Uart_Getch(void)
  46:../uart.c     **** {
 3085              		.loc 1 46 0
 3086              		.cfi_startproc
 3087              		@ Function supports interworking.
 3088              		@ args = 0, pretend = 0, frame = 0
 3089              		@ frame_needed = 1, uses_anonymous_args = 0
 3090 01cc 0DC0A0E1 		mov	ip, sp
 3091              	.LCFI6:
 3092              		.cfi_def_cfa_register 12
 3093 01d0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3094 01d4 04B04CE2 		sub	fp, ip, #4
 3095              		.cfi_offset 14, -8
 3096              		.cfi_offset 13, -12
 3097              		.cfi_offset 11, -16
 3098              	.LCFI7:
 3099              		.cfi_def_cfa 11, 4
  47:../uart.c     ****     while (!(rUTRSTAT0 & 0x1));        // esperar a que el buffer contenga datos
 3100              		.loc 1 47 0
 3101 01d8 0000A0E1 		mov	r0, r0	@ nop
 3102              	.L10:
 3103              		.loc 1 47 0 is_stmt 0 discriminator 1
 3104 01dc 28309FE5 		ldr	r3, .L11
 3105 01e0 003093E5 		ldr	r3, [r3, #0]
 3106 01e4 013003E2 		and	r3, r3, #1
 3107 01e8 000053E3 		cmp	r3, #0
 3108 01ec FAFFFF0A 		beq	.L10
  48:../uart.c     **** 	return RdURXH0();		   		   // devolver el caracter
 3109              		.loc 1 48 0 is_stmt 1
 3110 01f0 18309FE5 		ldr	r3, .L11+4
 3111 01f4 0030D3E5 		ldrb	r3, [r3, #0]
 3112 01f8 FF3003E2 		and	r3, r3, #255
  49:../uart.c     **** }
 3113              		.loc 1 49 0
 3114 01fc 0300A0E1 		mov	r0, r3
 3115 0200 0CD04BE2 		sub	sp, fp, #12
 3116 0204 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3117 0208 1EFF2FE1 		bx	lr
 3118              	.L12:
 3119              		.align	2
 3120              	.L11:
 3121 020c 1000D001 		.word	30408720
 3122 0210 2400D001 		.word	30408740
 3123              		.cfi_endproc
 3124              	.LFE3:
 3126              		.align	2
 3127              		.global	Uart_SendByte
 3129              	Uart_SendByte:
 3130              	.LFB4:
  50:../uart.c     **** 
  51:../uart.c     **** void Uart_SendByte(int data)
  52:../uart.c     **** {
 3131              		.loc 1 52 0
 3132              		.cfi_startproc
 3133              		@ Function supports interworking.
 3134              		@ args = 0, pretend = 0, frame = 16
 3135              		@ frame_needed = 1, uses_anonymous_args = 0
 3136 0214 0DC0A0E1 		mov	ip, sp
 3137              	.LCFI8:
 3138              		.cfi_def_cfa_register 12
 3139 0218 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3140 021c 04B04CE2 		sub	fp, ip, #4
 3141              		.cfi_offset 14, -8
 3142              		.cfi_offset 13, -12
 3143              		.cfi_offset 11, -16
 3144              	.LCFI9:
 3145              		.cfi_def_cfa 11, 4
 3146 0220 10D04DE2 		sub	sp, sp, #16
 3147 0224 18000BE5 		str	r0, [fp, #-24]
  53:../uart.c     ****     char localBuf[2] = {'\0','\0'};
 3148              		.loc 1 53 0
 3149 0228 0030A0E3 		mov	r3, #0
 3150 022c 10304BE5 		strb	r3, [fp, #-16]
 3151 0230 0030A0E3 		mov	r3, #0
 3152 0234 0F304BE5 		strb	r3, [fp, #-15]
  54:../uart.c     **** 
  55:../uart.c     ****     if(data == '\n')		
 3153              		.loc 1 55 0
 3154 0238 18301BE5 		ldr	r3, [fp, #-24]
 3155 023c 0A0053E3 		cmp	r3, #10
 3156 0240 0900001A 		bne	.L17
  56:../uart.c     **** 	{
  57:../uart.c     **** 	   while (!(rUTRSTAT0 & 0x2));     // esperar a que THR se vacie
 3157              		.loc 1 57 0
 3158 0244 0000A0E1 		mov	r0, r0	@ nop
 3159              	.L15:
 3160              		.loc 1 57 0 is_stmt 0 discriminator 1
 3161 0248 50309FE5 		ldr	r3, .L18
 3162 024c 003093E5 		ldr	r3, [r3, #0]
 3163 0250 023003E2 		and	r3, r3, #2
 3164 0254 000053E3 		cmp	r3, #0
 3165 0258 FAFFFF0A 		beq	.L15
  58:../uart.c     **** 	   WrUTXH0('\r');			       // escribir retorno de carro (utilizar macro)
 3166              		.loc 1 58 0 is_stmt 1
 3167 025c 40309FE5 		ldr	r3, .L18+4
 3168 0260 0D20A0E3 		mov	r2, #13
 3169 0264 0020C3E5 		strb	r2, [r3, #0]
  59:../uart.c     **** 	}
  60:../uart.c     **** 	while (!(rUTRSTAT0 & 0x2)); 	   // esperar a que THR se vacie
 3170              		.loc 1 60 0
 3171 0268 000000EA 		b	.L16
 3172              	.L17:
 3173 026c 0000A0E1 		mov	r0, r0	@ nop
 3174              	.L16:
 3175              		.loc 1 60 0 is_stmt 0 discriminator 1
 3176 0270 28309FE5 		ldr	r3, .L18
 3177 0274 003093E5 		ldr	r3, [r3, #0]
 3178 0278 023003E2 		and	r3, r3, #2
 3179 027c 000053E3 		cmp	r3, #0
 3180 0280 FAFFFF0A 		beq	.L16
  61:../uart.c     **** 	WrUTXH0(data);				       // escribir data (utilizar macro)
 3181              		.loc 1 61 0 is_stmt 1
 3182 0284 18309FE5 		ldr	r3, .L18+4
 3183 0288 18201BE5 		ldr	r2, [fp, #-24]
 3184 028c FF2002E2 		and	r2, r2, #255
 3185 0290 0020C3E5 		strb	r2, [r3, #0]
  62:../uart.c     **** }
 3186              		.loc 1 62 0
 3187 0294 0CD04BE2 		sub	sp, fp, #12
 3188 0298 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3189 029c 1EFF2FE1 		bx	lr
 3190              	.L19:
 3191              		.align	2
 3192              	.L18:
 3193 02a0 1000D001 		.word	30408720
 3194 02a4 2000D001 		.word	30408736
 3195              		.cfi_endproc
 3196              	.LFE4:
 3198              		.align	2
 3199              		.global	Uart_SendString
 3201              	Uart_SendString:
 3202              	.LFB5:
  63:../uart.c     **** 
  64:../uart.c     **** void Uart_SendString(char *pt)
  65:../uart.c     **** {
 3203              		.loc 1 65 0
 3204              		.cfi_startproc
 3205              		@ Function supports interworking.
 3206              		@ args = 0, pretend = 0, frame = 8
 3207              		@ frame_needed = 1, uses_anonymous_args = 0
 3208 02a8 0DC0A0E1 		mov	ip, sp
 3209              	.LCFI10:
 3210              		.cfi_def_cfa_register 12
 3211 02ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3212 02b0 04B04CE2 		sub	fp, ip, #4
 3213              		.cfi_offset 14, -8
 3214              		.cfi_offset 13, -12
 3215              		.cfi_offset 11, -16
 3216              	.LCFI11:
 3217              		.cfi_def_cfa 11, 4
 3218 02b4 08D04DE2 		sub	sp, sp, #8
 3219 02b8 10000BE5 		str	r0, [fp, #-16]
  66:../uart.c     ****     while (*pt)						    // mandar byte a byte hasta completar string
 3220              		.loc 1 66 0
 3221 02bc 060000EA 		b	.L21
 3222              	.L22:
  67:../uart.c     **** 	Uart_SendByte(*pt++);
 3223              		.loc 1 67 0
 3224 02c0 10301BE5 		ldr	r3, [fp, #-16]
 3225 02c4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3226 02c8 10201BE5 		ldr	r2, [fp, #-16]
 3227 02cc 012082E2 		add	r2, r2, #1
 3228 02d0 10200BE5 		str	r2, [fp, #-16]
 3229 02d4 0300A0E1 		mov	r0, r3
 3230 02d8 FEFFFFEB 		bl	Uart_SendByte
 3231              	.L21:
  66:../uart.c     ****     while (*pt)						    // mandar byte a byte hasta completar string
 3232              		.loc 1 66 0 discriminator 1
 3233 02dc 10301BE5 		ldr	r3, [fp, #-16]
 3234 02e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3235 02e4 000053E3 		cmp	r3, #0
 3236 02e8 F4FFFF1A 		bne	.L22
  68:../uart.c     **** }
 3237              		.loc 1 68 0
 3238 02ec 0CD04BE2 		sub	sp, fp, #12
 3239 02f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3240 02f4 1EFF2FE1 		bx	lr
 3241              		.cfi_endproc
 3242              	.LFE5:
 3244              		.align	2
 3245              		.global	Uart_Printf
 3247              	Uart_Printf:
 3248              	.LFB6:
  69:../uart.c     **** 
  70:../uart.c     **** void Uart_Printf(char *fmt,...)
  71:../uart.c     **** {
 3249              		.loc 1 71 0
 3250              		.cfi_startproc
 3251              		@ Function supports interworking.
 3252              		@ args = 4, pretend = 16, frame = 264
 3253              		@ frame_needed = 1, uses_anonymous_args = 1
 3254 02f8 0DC0A0E1 		mov	ip, sp
 3255              	.LCFI12:
 3256              		.cfi_def_cfa_register 12
 3257 02fc 0F002DE9 		stmfd	sp!, {r0, r1, r2, r3}
 3258 0300 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3259 0304 14B04CE2 		sub	fp, ip, #20
 3260              		.cfi_offset 14, -24
 3261              		.cfi_offset 13, -28
 3262              		.cfi_offset 11, -32
 3263              		.cfi_offset 3, -4
 3264              		.cfi_offset 2, -8
 3265              		.cfi_offset 1, -12
 3266              		.cfi_offset 0, -16
 3267              	.LCFI13:
 3268              		.cfi_def_cfa 11, 20
 3269 0308 42DF4DE2 		sub	sp, sp, #264
  72:../uart.c     ****     va_list ap;
  73:../uart.c     ****     char string[256];
  74:../uart.c     **** 
  75:../uart.c     ****     va_start(ap,fmt);
 3270              		.loc 1 75 0
 3271 030c 08308BE2 		add	r3, fp, #8
 3272 0310 10300BE5 		str	r3, [fp, #-16]
  76:../uart.c     ****     vsprintf(string,fmt,ap);
 3273              		.loc 1 76 0
 3274 0314 113E4BE2 		sub	r3, fp, #272
 3275 0318 0300A0E1 		mov	r0, r3
 3276 031c 04109BE5 		ldr	r1, [fp, #4]
 3277 0320 10201BE5 		ldr	r2, [fp, #-16]
 3278 0324 FEFFFFEB 		bl	vsprintf
  77:../uart.c     ****     Uart_SendString(string);
 3279              		.loc 1 77 0
 3280 0328 113E4BE2 		sub	r3, fp, #272
 3281 032c 0300A0E1 		mov	r0, r3
 3282 0330 FEFFFFEB 		bl	Uart_SendString
  78:../uart.c     ****     va_end(ap);
  79:../uart.c     **** }
 3283              		.loc 1 79 0
 3284 0334 0CD04BE2 		sub	sp, fp, #12
 3285 0338 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3286 033c 1EFF2FE1 		bx	lr
 3287              		.cfi_endproc
 3288              	.LFE6:
 3290              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:2881   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:2884   .text:00000000 Uart_Init
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:2998   .text:00000150 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3013   .text:00000180 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3016   .text:00000180 Uart_Config
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3043   .text:00000198 Uart_TxEmpty
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3076   .text:000001c8 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3080   .text:000001cc $a
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3083   .text:000001cc Uart_Getch
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3121   .text:0000020c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3126   .text:00000214 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3129   .text:00000214 Uart_SendByte
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3193   .text:000002a0 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3198   .text:000002a8 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3201   .text:000002a8 Uart_SendString
C:\Users\USUARI~1\AppData\Local\Temp\ccfOZgLd.s:3247   .text:000002f8 Uart_Printf
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2iz
vsprintf
